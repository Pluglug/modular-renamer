---
config:
  layout: elk
  theme: default
  dagre:
    ranksep: 100
    nodesep: 100
    edgesep: 10
  direction: TD
---

classDiagram
    namespace core_elements {
        class ElementConfig {
            +type: str
            +id: str
            +order: int
            +enabled: bool
            +separator: str
        }
        class INameElement {
            <<interface>>
            +element_type: ClassVar[str]
            +config_fields: ClassVar[Dict[str, Any]]
            +id: str
            +order: int
            +enabled: bool
            +separator: str
            +value: Any
            +parse(name: str) bool
            +render() tuple[str, str]
            +set_value(value: Any) void
            +standby() void
            +initialize_cache() void
        }
        class BaseElement {
            <<abstract>>
            #_value: Any
            #_pattern: Pattern
            +cache_invalidated: bool
            +config_fields: ClassVar[Dict[str, Any]]
            +validate_config(config: ElementConfig) Optional[str]
            +get_config_names() Set[str]
            +parse(name: str) bool
            +render() tuple[str, str]
            +set_value(value: Any) void
            +standby() void
            +initialize_cache() void
            #_build_pattern() str
            #generate_random_value() str
        }
        class ICounter {
            <<interface>>
            +value_int: int
            +increment() void
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
        }
        class BaseCounter {
            <<abstract>>
            #_value_int: int
            +forward: str
            +backward: str
            +increment() void
            +format_value(value: int) str
            #_parse_value(value_str: str) int
        }
    }
    namespace elements {
        class TextElement {
            +items: List[str]
            +config_fields: Dict[str, Any]
            +validate_config(config: ElementConfig) Optional[str]
            +parse(name: str) bool
            +render() tuple[str, str]
            +set_value(value: Any) void
            #_build_pattern() str
            #generate_random_value() tuple[str, str]
        }
        class PositionElement {
            +xaxis_values: List[str]
            +yaxis_values: List[str]
            +zaxis_values: List[str]
            +position_values: List[str]
            +config_fields: Dict[str, Any]
            +validate_config(config: ElementConfig) Optional[str]
            +parse(name: str) bool
            +render() tuple[str, str]
            #_build_pattern() str
            #generate_random_value() tuple[str, str]
        }
        class NumericCounter {
            +digits: int
            +config_fields: Dict[str, Any]
            +validate_config(config: ElementConfig) Optional[str]
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            #_build_pattern() str
            #generate_random_value() tuple[str, str]
        }
        class BlenderCounter {
            +digits: int
            +config_fields: Dict[str, Any]
            +validate_config(config: ElementConfig) Optional[str]
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            #_build_pattern() str
            #_parse_value(value_str: str) int
            #generate_random_value() tuple[str, str]
        }
        class AlphabeticCounter {
            +uppercase: bool
            +config_fields: Dict[str, Any]
            +validate_config(config: ElementConfig) Optional[str]
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            #_build_pattern() str
            #_parse_value(value_str: str) int
            #generate_random_value() tuple[str, str]
        }
    }
    namespace core {
        class ElementRegistry {
            -_element_types: Dict[str, Type]
            -_instance: ElementRegistry
            -_is_initialized: bool
            +get_instance() ElementRegistry
            +reset_instance() void
            +register_element_type(type: str, class: Type) void
            +get_element_type(type_name: str) Optional[Type[INameElement]]
            +create_element(element_config: ElementConfig) INameElement
            +get_registered_types() List[str]
            -_initialize_default_elements() void
        }
        class NamingPattern {
            +name: str
            +elements: List[INameElement]
            +parse_name(name: str) void
            +update_elements(updates: Dict) void
            +render_name() str
            +validate() List[str]
            +get_element_by_id(element_id: str) INameElement
            +gen_test_names(random: bool, num_cases: int) List[str]
            -_load_elements(config: List, element_registry: ElementRegistry) void
            -_notify_elements_changed() void
        }
        class PatternRegistry {
            -_patterns: Dict[str, NamingPattern]
            +register_pattern(pattern: NamingPattern) void
            +get_pattern(name: str) Optional[NamingPattern]
            +get_all_patterns() List[NamingPattern]
            +remove_pattern(name: str) void
            +clear() void
        }
        class PatternConfigManager {
            -_element_registry: ElementRegistry
            -_pattern_registry: PatternRegistry
            +create_pattern(name: str, elements_data: List[Dict]) NamingPattern
            +load_from_file(path: str) void
            +save_to_file(file_path: str, pattern_name: str) void
            +save_all_patterns(file_path: str) void
            -_convert_to_element_config(element_data: Dict) ElementConfig
        }
        class IRenameTarget {
            <<interface>>
            +get_name() str
            +set_name(name: str) void
            +get_namespace_key() str
            +target_type: str
            +get_blender_object() Any
            +create_namespace(context: Context) INamespace
        }
        class INamespace {
            <<interface>>
            +contains(name: str) bool
            +add(name: str) void
            +remove(name: str) void
            +update(old: str, new: str) void
        }
        class Namespace {
            -_context: Context
            -_names: Set[str]
            -_initializer: Optional[Callable]
            +__init__(context: Context, initializer: Optional[Callable])
            +contains(name: str) bool
            +add(name: str) void
            +remove(name: str) void
            +update(old: str, new: str) void
            -_initialize() void
        }
        class NamespaceCache {
            -_context: Context
            -_namespaces: Dict[Any, INamespace]
            +__init__(context: Context)
            +get_namespace(target: IRenameTarget) INamespace
            +update_context(context: Context) void
            +clear() void
            +get_all_namespaces() List[INamespace]
        }
        class TargetCollection {
            -_context: Context
            -_targets: List[IRenameTarget]
            +__init__(context: Context)
            +collect_by_type(target_type: str) List[IRenameTarget]
            +collect_selected() List[IRenameTarget]
            +collect_all() List[IRenameTarget]
            +update_context(context: Context) void
        }
        class ConflictResolver {
            -_namespace_cache: NamespaceCache
            +STRATEGY_COUNTER: str = "counter"
            +STRATEGY_FORCE: str = "force"
            +resolve_name_conflict(target: IRenameTarget, pattern: NamingPattern, proposed_name: str, strategy: str) str
            +apply_namespace_update(target: IRenameTarget, old_name: str, new_name: str) void
            -_get_namespace(target: IRenameTarget) Optional[INamespace]
            -_is_name_in_conflict(name: str, namespace: INamespace, target: IRenameTarget) bool
            -_resolve_with_counter(pattern: NamingPattern, name: str, namespace: INamespace) str
            -_resolve_with_force(name: str) str
            -_find_conflicting_targets(target: IRenameTarget, name: str) List[IRenameTarget]
        }
        class RenameResult {
            +target: IRenameTarget
            +original_name: str
            +proposed_name: str
            +final_name: str
            +success: bool
            +message: str
        }
        class BatchRenameOperation {
            +targets: List[IRenameTarget]
            +pattern: NamingPattern
            +element_updates: Dict
            +strategy: str
            +results: List[RenameResult]
            +pending_results: Dict[str, RenameResult]
            +has_conflicts: bool
            +get_result_summary() str
        }
        class RenameService {
            -_pattern_registry: PatternRegistry
            -_target_collection: TargetCollection
            -_namespace_cache: NamespaceCache
            -_conflict_resolver: ConflictResolver
            +__init__(context: Context)
            +update_context(context: Context) void
            +prepare_batch(target_type: str, pattern_name: str) BatchRenameOperation
            +execute_batch(batch_op: BatchRenameOperation) List[RenameResult]
        }
    }
    namespace targets {
        class BaseRenameTarget {
            <<abstract>>
            #_blender_obj: Any
            +get_name() str
            +set_name(name: str) void
            +get_blender_object() Any
            +create_namespace(context: Context) INamespace
        }
        class ObjectRenameTarget {
            +target_type: str = "OBJECT"
            +get_namespace_key() str
            +create_namespace(context: Context) INamespace
        }
        class PoseBoneRenameTarget {
            +target_type: str = "POSE_BONE"
            +get_namespace_key() str
            +create_namespace(context: Context) INamespace
        }
        class MaterialRenameTarget {
            +target_type: str = "MATERIAL"
            +get_namespace_key() str
            +create_namespace(context: Context) INamespace
        }
    }
    namespace ui {
        class RenameSettings {
            +default_target_type: str
            +default_conflict_strategy: str
            +show_warnings: bool
            +auto_save_patterns: bool
        }
        class RenameProperties {
            +mode: str
            +target_type: str
            +pattern: str
            +conflict_strategy: str
            +patterns: List
            +active_pattern_index: int
            +active_element_index: int
        }
        class RENAME_PT_main_panel {
            +draw(context: Context) void
            -draw_rename_mode(context: Context, layout: UILayout) void
            -draw_edit_mode(context: Context, layout: UILayout) void
            -draw_element_actions(context: Context, layout: UILayout, element: INameElement) void
        }
        class RENAME_OT_execute {
            +execute(context: Context) dict
            +invoke(context: Context, event: Event) dict
        }
        class RENAME_UL_patterns {
            +draw_item(context: Context, layout: UILayout, data, item, icon, active_data, active_propname, index: int) void
        }
    }
    namespace utils {
        class ModularLogger {
            +log_level: int
            +log_to_file: bool
            +info(message: str) void
            +warning(message: str) void
            +error(message: str) void
            +debug(message: str) void
        }
        class ConfigManager {
            +export_settings(path: str) bool
            +import_settings(path: str) bool
            +get_user_presets_dir() str
            +get_user_patterns_dir() str
            +get_export_dir() str
        }
    }
    INameElement <|-- BaseElement
    BaseElement <|-- TextElement
    BaseElement <|-- PositionElement
    BaseElement <|-- BaseCounter
    ICounter <|-- BaseCounter
    BaseCounter <|-- NumericCounter
    BaseCounter <|-- BlenderCounter
    BaseCounter <|-- AlphabeticCounter
    IRenameTarget <|-- BaseRenameTarget
    BaseRenameTarget <|-- ObjectRenameTarget
    BaseRenameTarget <|-- PoseBoneRenameTarget
    BaseRenameTarget <|-- MaterialRenameTarget
    INamespace <|-- Namespace
    ElementRegistry --> INameElement : creates >
    ElementRegistry --> ElementConfig : uses >
    NamingPattern --> INameElement : contains 1..*
    NamingPattern --> ElementConfig : configures >
    PatternRegistry --> NamingPattern : manages *
    PatternConfigManager --> PatternRegistry : uses 1
    PatternConfigManager --> ElementRegistry : uses 1
    PatternConfigManager --> ElementConfig : creates >
    NamespaceCache --> INamespace : manages *
    TargetCollection o-- IRenameTarget : contains
    ConflictResolver --> NamespaceCache : uses 1
    ConflictResolver --> IRenameTarget : resolves for * 
    RenameResult --> IRenameTarget : references 1
    BatchRenameOperation --> IRenameTarget : contains *
    BatchRenameOperation --> RenameResult : produces *
    BatchRenameOperation --> NamingPattern : uses 1
    RenameService --> PatternRegistry : uses 1
    RenameService --> ConflictResolver : uses 1
    RenameService --> TargetCollection : uses 1
    RenameService --> NamespaceCache : uses 1
    RenameService --> BatchRenameOperation : creates >
    RenameService --> RenameResult : creates *
    RENAME_PT_main_panel --> RenameProperties : uses 1
    RENAME_OT_execute --> RenameService : uses 1
    RENAME_UL_patterns --> PatternRegistry : displays 1
    NamingPattern "1" o-- "*" INameElement : contains
    PatternRegistry "1" o-- "*" NamingPattern : registers
    NamespaceCache "1" o-- "*" INamespace : caches
    TargetCollection "1" o-- "*" IRenameTarget : contains
    RenameService "1" --> "1" PatternRegistry : depends on
    RenameService "1" --> "1" ConflictResolver : depends on
    RenameService "1" --> "1" TargetCollection : depends on
    RenameService "1" --> "1" NamespaceCache : depends on
