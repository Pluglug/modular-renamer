classDiagram
    namespace core {
        class ConflictResolver {
            +STRATEGY_COUNTER
            +STRATEGY_FORCE
            #__init__(namespace_manager: NamespaceManager)
            +resolve(target: IRenameTarget, name: str, strategy: str) str
            #_resolve_with_counter(target: IRenameTarget, name: str, namespace: INamespace) str
            #_resolve_with_force(target: IRenameTarget, name: str, namespace: INamespace) str
            #_find_conflicting_targets(target: IRenameTarget, name: str) List[...]
        }
        class ElementConfig {
            <<interface>>
            #__init__(id: str, order: int, enabled: bool, separator: str)
        }
        class INameElement {
            <<interface>>
            +*id() str
            +*order() int
            +*enabled() bool
            +*separator() str
            +*value() str
            +*parse(name: str) bool
            +*render() Tuple[...]
            +*set_value(new_value: Any) None
            +*standby() None
            +*initialize_cache() None
        }
        class BaseElement {
            <<abstract>>
            #__init__(element_config: ElementConfig)
            +id() str
            +order() int
            +enabled() bool
            +separator() str
            +value() str
            +set_value(new_value: Any) None
            +initialize_cache() None
            +standby() None
            +parse(name: str) bool
            +render() Tuple[...]
            #*_build_pattern() str
            +*generate_random_value() str
        }
        class ICounter {
            <<interface>>
            +*value_int() int
            +*value_int(value: int) None
            +*increment() None
            +*format_value(value: int) str
            +*gen_proposed_name(value: int) str
        }
        class BaseCounter {
            <<abstract>>
            #__init__(element_config: ElementConfig)
            +value_int() int
            +value_int(value: int) None
            +set_value(new_value: Any) None
            +increment() None
            +parse(name: str) bool
            #_parse_value(value_str: str) int
        }
        class ElementRegistry {
            #__init__()
            +register_element_type(type_name: str, element_class: INameElement)
            +create_element(type_name: str, config: dict) INameElement
            +get_registered_types() List[...]
            +validate_elements_config(config: List) List[...]
        }
        class INamespace {
            <<interface>>
            +*contains(name: str) bool
            +*add(name: str) None
            +*remove(name: str) None
            +*update(old_name: str, new_name: str) None
        }
        class NamespaceBase {
            <<abstract>>
            #__init__()
            #*_initialize() None
            +contains(name: str) bool
            +add(name: str) None
            +remove(name: str) None
            +update(old_name: str, new_name: str) None
        }
        class NamespaceManager {
            #__init__()
            +register_namespace_type(target_type: str, factory: Callable) None
            +get_namespace(target: IRenameTarget) INamespace
        }
        class NamingPattern {
            #__init__(name: str, target_type: str, elements_config: List[...], element_registry: ElementRegistry)
            #_load_elements(elements_config: List[...], element_registry: ElementRegistry) None
            +parse_name(name: str) None
            +update_elements(updates: Dict) None
            +render_name() str
            +validate() List[...]
        }
        class PatternRegistry {
            #__init__(element_registry: ElementRegistry)
            +register_pattern(pattern: NamingPattern) None
            +get_pattern(target_type: str, name: str) NamingPattern
            +get_patterns_for_type(target_type: str) List[...]
            +load_from_file(path: str) None
            +save_to_file(path: str) bool
        }
        class RenameContext {
            #__init__(target: IRenameTarget, pattern: NamingPattern)
        }
        class RenameService {
            #__init__(pattern_registry: PatternRegistry, namespace_manager: NamespaceManager, conflict_resolver: ConflictResolver)
            +prepare(target: IRenameTarget, pattern_name: str) RenameContext
            +update_elements(context: RenameContext, updates: Dict) RenameContext
            +execute(context: RenameContext, strategy: str) bool
            +batch_rename(targets: List[...], pattern_name: str, updates: Dict, strategy: str) List[...]
        }
        class IRenameTarget {
            <<interface>>
            +*target_type() str
            +*blender_object() Any
            +*get_name() str
            +*set_name(name: str) None
            +*get_namespace_key() Any
        }
        class CollectionStrategy {
            <<interface>>
            +*collect(context: Any) List[...]
        }
        class TargetCollector {
            #__init__()
            +register_strategy(target_type: str, strategy: CollectionStrategy) None
            +collect(target_type: str, context: Any) List[...]
        }
    }
    namespace elements {
        class NumericCounter {
            #__init__(element_config)
            #_build_pattern() str
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            +generate_random_value() Tuple[...]
        }
        class BlenderCounter {
            #__init__(element_config)
            #_build_pattern() str
            #_parse_value(value_str: str) int
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            +generate_random_value() Tuple[...]
        }
        class AlphabeticCounter {
            #__init__(element_config)
            #_build_pattern() str
            #_parse_value(value_str: str) int
            +format_value(value: int) str
            +gen_proposed_name(value: int) str
            +generate_random_value() Tuple[...]
        }
        class PositionElement {
            #__init__(element_config)
            #_build_pattern()
            +generate_random_value()
        }
        class TextElement {
            #__init__(element_config)
            #_build_pattern() str
            +generate_random_value() Tuple[...]
        }
    }
    class DiagramConfig {
        #__init__()
        +to_dict() dict
        +from_dict(data: dict) None
    }
    class ClassInfo {
        #__init__(name: str, namespace: str, is_interface: bool, is_abstract: bool, docstring: str)
        +add_attribute(name: str, visibility: str, type_hint: str)
        +add_method(name: str, visibility: str, params: List[...], return_type: str, is_abstract: bool, is_static: bool, is_class_method: bool)
        +get_full_name() str
        +to_dict() dict
        +^from_dict(data: dict) ClassInfo
    }
    class RelationshipInfo {
        #__init__(source: str, target: str, relation_type: RelationType, label: str, source_multiplicity: str, target_multiplicity: str)
        +to_dict() dict
        +^from_dict(data: dict) RelationshipInfo
    }
    class DiagramData {
        #__init__()
        +add_class(class_info: ClassInfo) None
        +add_relationship(relationship: RelationshipInfo) None
        +get_class(name: str, namespace: str) Optional[...]
        +to_dict() dict
        +^from_dict(data: dict) DiagramData
        +serialize() str
        +^deserialize(json_data: str) DiagramData
    }
    class CodeAnalyzer {
        <<interface>>
        #__init__(config: DiagramConfig)
        +*analyze(path: str) DiagramData
    }
    class PythonASTAnalyzer {
        #__init__(config: DiagramConfig)
        +analyze(path: str) DiagramData
        #_should_exclude(path: str, is_dir: bool) bool
        #_analyze_directory(directory: str, diagram_data: DiagramData) None
        #_analyze_file(file_path: str, diagram_data: DiagramData) None
        #_extract_classes(tree: ast.AST, namespace: str, diagram_data: DiagramData) None
        #_process_class_def(node: ast.ClassDef, namespace: str, diagram_data: DiagramData) None
        #_process_attribute(node: ast.Assign, class_info: ClassInfo) None
        #_process_method(node: ast.FunctionDef, class_info: ClassInfo) None
        #_is_interface(node: ast.ClassDef) bool
        #_is_abstract(node: ast.ClassDef) bool
        #_get_name_from_expr(expr) str
    }
    class DiagramGenerator {
        <<interface>>
        #__init__(config: DiagramConfig)
        +*generate(diagram_data: DiagramData) str
    }
    class MermaidGenerator {
        #__init__(config: DiagramConfig)
        +generate(diagram_data: DiagramData) str
        #_generate_class(class_info: ClassInfo) str
        #_generate_relationship(relationship: RelationshipInfo) str
    }
    class PlantUMLGenerator {
        #__init__(config: DiagramConfig)
        +generate(diagram_data: DiagramData) str
    }
    class OutputFormat {
        +MERMAID
        +PLANTUML
    }
    class RelationType {
        +INHERITANCE
        +REALIZATION
        +DEPENDENCY
        +ASSOCIATION
        +AGGREGATION
        +COMPOSITION
    }
    PythonASTAnalyzer <|-- CodeAnalyzer
    MermaidGenerator <|-- DiagramGenerator
    PlantUMLGenerator <|-- DiagramGenerator
    OutputFormat <|-- Enum
    RelationType <|-- Enum
    BaseElement <|.. INameElement
    BaseCounter <|-- BaseElement
    BaseCounter <|.. ICounter
    NamespaceBase <|.. INamespace
    NumericCounter <|-- BaseCounter
    BlenderCounter <|-- BaseCounter
    AlphabeticCounter <|-- BaseCounter
    PositionElement <|-- BaseElement
    TextElement <|-- BaseElement
